(ql:quickload '(:cl-ppcre :fset))

(defun day24 ()
  (let ((inputs (ppcre:split "\\n\\n"
                             (uiop:read-file-string #P"./24.txt")))
        (fixed-wires (fset:empty-map)) (gates (fset:empty-map))
        (all-wires (fset:empty-set)))
    (ppcre:do-register-groups ((#'intern wire) (#'parse-integer v))
        ("(\\w+): (\\d)" (car inputs))
      (fset:includef fixed-wires wire v))
    (ppcre:do-register-groups ((#'intern a gate b c))
        ("(\\w+) (\\w+) (\\w+) -> (\\w+)" (cadr inputs))
      (fset:includef gates c (list gate a b))
      (fset:unionf all-wires (fset:set a b c)))
    (labels ((evaluate (gate a b)
               (case gate
                 (AND (if (and (plusp a) (plusp b)) 1 0))
                 (OR (if (or (plusp a) (plusp b)) 1 0))
                 (XOR (if (eql a b) 0 1))))
             (get-value (wire)
               (or (fset:lookup fixed-wires wire)
                   (destructuring-bind (gate a b)
                       (fset:lookup gates wire)
                     (evaluate gate (get-value a) (get-value b))))))
      (loop :with z-wires := (fset:filter (lambda (w)
                                            (char= (char (string w) 0) #\z))
                                          all-wires)
            :for wire :in (fset:convert 'list z-wires) :for power :from 0
            :when (plusp (get-value wire))
              :sum (expt 2 power)))))
