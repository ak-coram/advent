(ql:quickload '(:cl-ppcre :fset))

(defun day18 (is-part-two)
  (let ((drops (fset:empty-seq)) (start (cons 0 0)) (exit (cons 70 70)))
    (ppcre:do-register-groups ((#'parse-integer x y))
        ("(\\d+).(\\d+)\\n" (uiop:read-file-string #P"./18.txt"))
      (fset:push-last drops (cons x y)))
    (labels ((get-next (position)
               (let ((x (car position)) (y (cdr position)))
                 (loop :for (dx . dy) :in '(( 0 . -1) (0 . 1) (-1 .  0) (1 . 0))
                       :collect (cons (+ x dx) (+ y dy)))))
             (walk (obstacles)
               (loop :named outer
                     :with unwalkablep
                       := (lambda (position)
                            (let ((x (car position)) (y (cdr position)))
                              (or (not (<= 0 x 70)) (not (<= 0 y 70))
                                  (fset:member? position obstacles))))
                     :and queue := (fset:seq (cons 0 start))
                     :and visited := (fset:set start)
                     :for (n . position) := (fset:pop-first queue)
                     :while n
                     :do (loop :for next :in (get-next position)
                               :when (equal next exit)
                                 :do (return-from outer (values (1+ n) visited))
                               :unless (or (fset:member? next visited)
                                           (funcall unwalkablep next))
                                 :do (fset:push-last queue (cons (1+ n) next))
                                 :and :do (fset:includef visited next))
                     :finally (return-from outer (values nil visited)))))
      (if is-part-two
          (let ((obstacles (fset:range drops)) (last-visited nil))
            (fset:do-seq (obstacle (fset:reverse drops))
              (fset:removef obstacles obstacle)
              ;; Check if removed obstacle is next to previous visits
              (when (or (not last-visited)
                        (find-if (lambda (position)
                                   (fset:member? position last-visited))
                                 (get-next obstacle)))
                (multiple-value-bind (n visited) (walk obstacles)
                  (setf last-visited visited)
                  (when n
                    (return
                      (format nil "~d,~d" (car obstacle) (cdr obstacle))))))))
          (nth-value 0 (walk (fset:range (fset:subseq drops 0 1024))))))))
