(ql:quickload :fset)

(defun day11 (is-part-two)
  (labels ((transform (stone)
             (if (zerop stone)
                 '(1)
                 (let* ((digit-count (floor (1+ (log stone 10))))
                        (m (expt 10 (floor digit-count 2))))
                   (if (evenp digit-count)
                       (list (floor stone m) (mod stone m))
                       (list (* stone 2024))))))
           (blink (stones) (let ((result (fset:empty-bag)))
                             (fset:do-bag-pairs (stone n stones result)
                               (dolist (new-stone (transform stone))
                                 (fset:includef result new-stone n))))))
    (let ((stones (fset:empty-bag)))
      (dolist (stone (uiop:split-string (uiop:read-file-line #P"./11.txt")))
        (fset:includef stones (parse-integer stone)))
      (dotimes (_ (if is-part-two 75 25) (fset:size stones))
        (setf stones (blink stones))))))
