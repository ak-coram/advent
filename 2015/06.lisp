(ql:quickload :alexandria)
(ql:quickload :cl-ppcre)

(defun day06 (is-part-two)
  (labels ((get-update-fn (i)
             (alexandria:switch (i :test #'string=)
               ("on" (lambda (x) (if is-part-two (1+ x) 1)))
               ("off" (lambda (x) (if is-part-two (max 0 (1- x)) 0)))
               ("toggle" (lambda (x) (if is-part-two
                                         (+ x 2)
                                         (if (zerop x) 1 0)))))))
    (let ((grid (make-array '(1000 1000) :initial-element 0)))
      (loop :for line :in (uiop:read-file-lines #P"./06.txt")
            :do (ppcre:register-groups-bind (_ i x1 y1 x2 y2)
                    ("(turn )?(on|off|toggle) (\\d+),(\\d+) through (\\d+),(\\d+)" line)
                  (declare (ignore _))
                  (when (and i x1 y1 x2 y2)
                    (let ((f (get-update-fn i)))
                      (loop :for x :from (parse-integer x1) :upto (parse-integer x2)
                            :do (loop :for y :from (parse-integer y1) :upto (parse-integer y2)
                                      :for v := (aref grid x y)
                                      :do (setf (aref grid x y) (funcall f v))))))))
      (loop :for x :below (array-dimension grid 0)
            :sum (loop :for y :below (array-dimension grid 1)
                       :sum (aref grid x y))))))
