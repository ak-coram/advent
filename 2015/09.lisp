(ql:quickload :cl-ppcre)
(ql:quickload :alexandria)

(defun day09 (is-part-two)
  (let* ((destinations
           (loop :with acc := nil
                 :for line :in (uiop:read-file-lines #P"./09.txt")
                 :do (ppcre:register-groups-bind (from to cost)
                         ("(\\w+) to (\\w+) = (\\d+)" line)
                       (when (and from to cost)
                         (let* ((from-node (intern from)) (to-node (intern to))
                                (cost (parse-integer cost)))
                           (setf (alexandria:assoc-value acc from-node)
                                 (cons (cons to-node cost)
                                       (alexandria:assoc-value acc from-node))
                                 (alexandria:assoc-value acc to-node)
                                 (cons (cons from-node cost)
                                       (alexandria:assoc-value acc to-node))))))
                 :finally (return acc)))
         (path-length (length destinations))
         (goal nil))
    (labels ((walk (path total-cost)
               (loop :with from := (car path)
                     :for (destination . cost)
                       :in (alexandria:assoc-value destinations from)
                     :unless (find destination path :test #'eql)
                       :do (walk (cons destination path) (+ total-cost cost)))
               (when (and (eql (length path) path-length)
                          (or (not goal) (if is-part-two
                                             (> total-cost goal)
                                             (< total-cost goal))))
                 (setf goal total-cost))))
      (loop :for start :in (mapcar #'car destinations)
            :do (walk (list start) 0)
            :finally (return goal)))))
